from __future__ import print_function
import MDAnalysis
import numpy as np
from MDAnalysis.newanalysis.diffusion import msdCOM, msdMJ, unfoldTraj
from diffusion import msdMJdecomp, msdMJcrossterms #I just did not have vronis diffusion in my MDAnalysis, thus I used an extra module
from MDAnalysis.newanalysis.correl import correlate
import os
import time
import sys

########################################################################################################################################
def correlXYZ(data, result, ltc=0):
    data = np.ascontiguousarray(data.T)
    for i in range(3):
        tmp = correlate(data[i], data[i], ltc=ltc)
        for j in range(len(data[i])):
            result[j] += tmp[j]

try:
    base=sys.argv[1]
    psf=sys.argv[2]
    traj=sys.argv[3]
except:
    print("No file paths given")
    sys.exit()

print("Base: ", base)
print("PSF: ", psf)
print("Traj files:", traj)
            
########################################################################################################################################
# trajectories
########################################################################################################################################
psf=base+psf

firstfile=5
lastfile=100
skip = 20
u=MDAnalysis.Universe(psf,["%s%d.dcd" % (base+traj,i) for i in range(firstfile,lastfile+1)])

boxl=round(u.coord.dimensions[0],4)
dt=round(u.trajectory.dt,4)
n = u.trajectory.numframes/skip
if u.trajectory.numframes%skip != 0:
    n+=1

print ("System = %s\n"%psf)
print ("\tBox      = %10.5f\n"%boxl)
print ("\ttimestep = %10.5f\n"%(dt*skip))

########################################################################################################################################
# molecular species
########################################################################################################################################
sel_cat  = u.selectAtoms("resname IM21")
sel_an1  = u.selectAtoms("resname BF4")
sel_an2  = u.selectAtoms("resname NCN2")

ncat = sel_cat.numberOfResidues()
nan1 = sel_an1.numberOfResidues()
nan2 = sel_an2.numberOfResidues()
nan = nan1 + nan2

com_cat = np.zeros((int(n),int(ncat),3),dtype=np.float64)
com_an1 = np.zeros((int(n),int(nan1),3),dtype=np.float64)
com_an2 = np.zeros((int(n),int(nan2),3),dtype=np.float64)
com_an  = np.zeros((int(n),int(nan),3),dtype=np.float64)

mass_cat = sel_cat.masses()
mass_an1 = sel_an1.masses()
mass_an2 = sel_an2.masses()

charges_cat = sel_cat.charges()
charges_an1 = sel_an1.charges()
charges_an2 = sel_an2.charges()

########################################################################################################################################
# analysis
########################################################################################################################################
ctr=0
start=time.time()
print("")

for ts in u.trajectory[::skip]:
    print("\033[1AFrame %d of %d" % (ts.frame,u.trajectory.numframes), "\tElapsed time: %.2f hours" % ((time.time()-start)/3600))
    coor_cat = sel_cat.get_positions()
    coor_an1 = sel_an1.get_positions()
    coor_an2 = sel_an2.get_positions()
    
    com_cat[ctr] = sel_cat.centerOfMassByResidue(coor=coor_cat,masses=mass_cat)
    com_an1[ctr] = sel_an1.centerOfMassByResidue(coor=coor_an1,masses=mass_an1)
    com_an2[ctr] = sel_an2.centerOfMassByResidue(coor=coor_an2,masses=mass_an2)
    ctr+=1


print("unfolding coordinates ..")
unfoldTraj(com_cat,boxl)
unfoldTraj(com_an1, boxl)
unfoldTraj(com_an2, boxl)

msdmj_cat_an1 = msdMJcrossterms(com_cat, com_an1, 1, -1)
filename = 'msdMJ_cat_an1_'+str(firstfile) + '_' + str(lastfile) + '.dat'
f1=open(filename,'w')
for i in range(len(msdmj_cat_an1)):
    f1.write("%5.5f\t%5.5f\n" % (i*skip*dt, msdmj_cat_an1[i]))
f1.close()


msdmj_cat_an2 = msdMJcrossterms(com_cat, com_an2, 1, -1)
filename = 'msdMJ_cat_an2_'+str(firstfile) + '_' + str(lastfile) + '.dat'
f1=open(filename,'w')
for i in range(len(msdmj_cat_an2)):
    f1.write("%5.5f\t%5.5f\n" % (i*skip*dt, msdmj_cat_an2[i]))
f1.close()



msdmj_an1_an2 = msdMJcrossterms(com_an1, com_an2, 1, -1)
filename = 'msdMJ_an1_an2_'+str(firstfile) + '_' + str(lastfile) + '.dat'
f1=open(filename,'w')
for i in range(len(msdmj_an1_an2)):
    f1.write("%5.5f\t%5.5f\n" % (i*skip*dt, msdmj_an1_an2[i]))
f1.close()


msdmj_cat_cat = msdMJcrossterms(com_cat, com_cat, 1, 1)
filename = 'msdMJ_cat_cat_'+str(firstfile) + '_' + str(lastfile) + '.dat'
f1=open(filename,'w')
for i in range(len(msdmj_cat_cat)):
    f1.write("%5.5f\t%5.5f\n" % (i*skip*dt, msdmj_cat_cat[i]))
f1.close()


msdmj_an2_an2 = msdMJcrossterms(com_an2, com_an2, -1, -1)
filename = 'msdMJ_an2_an2_'+str(firstfile) + '_' + str(lastfile) + '.dat'
f1=open(filename,'w')
for i in range(len(msdmj_an2_an2)):
    f1.write("%5.5f\t%5.5f\n" % (i*skip*dt, msdmj_an2_an2[i]))
f1.close()


msdmj_an1_an1 = msdMJcrossterms(com_an1, com_an1, -1, -1)
filename = 'msdMJ_an1_an1_'+str(firstfile) + '_' + str(lastfile) + '.dat'
f1=open(filename,'w')
for i in range(len(msdmj_an1_an1)):
    f1.write("%5.5f\t%5.5f\n" % (i*skip*dt, msdmj_an1_an1[i]))
f1.close()
