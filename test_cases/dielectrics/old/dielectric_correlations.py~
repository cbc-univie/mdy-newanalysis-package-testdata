from __future__ import print_function
import MDAnalysis
import numpy as np
from MDAnalysis.newanalysis.correl import correlateParallel, correlate
import os
import time

###########################################################################################################################
# Correlation functions
###########################################################################################################################
def correlXYZ(data, result):
    data = np.ascontiguousarray(data.T)
    for i in range(3):
        result += correlate(data[i], data[i], ltc=1)

def crosscorrelXYZ(data1, data2, result, both=True):
    data1 = np.ascontiguousarray(data1.T)
    data2 = np.ascontiguousarray(data2.T)
    for i in range(3):
        result += correlate(data1[i], data2[i], ltc=1)
        if both:
            result += correlate(data2[i], data1[i], ltc=1)

###########################################################################################################################
# Trajectory
###########################################################################################################################
skip=10
base="../../data/emim_dca_equilibrium/"

u  = MDAnalysis.Universe(base+"emim_dca.psf",base+"emim_dca_fine.dcd")
uv = MDAnalysis.Universe(base+"emim_dca.psf",base+"emim_dca_fine.vel")

boxl = np.float64(round(u.coord.dimensions[0],4))
dt=round(u.trajectory.dt,4)

n = u.trajectory.numframes/skip
if u.trajectory.numframes%skip != 0:
    n+=1
    
###########################################################################################################################
# molecular species
###########################################################################################################################
sel_cat1  = u.selectAtoms("resname EMIM")
selv_cat1 = uv.selectAtoms("resname EMIM")
ncat1     = sel_cat1.numberOfResidues()
mass_cat1 = sel_cat1.masses()
charge_cat1 = sel_cat1.charges()
com_cat1  = np.zeros((n,ncat1,3),dtype=np.float64)
mdcat1    = np.zeros((n,3),dtype=np.float64)
print("Number EMIM   = ",ncat1)

sel_an1  = u.selectAtoms("resname DCA")
selv_an1 = uv.selectAtoms("resname DCA")
nan1     = sel_an1.numberOfResidues()
mass_an1 = sel_an1.masses()
charge_an1 = sel_an1.charges()
com_an1  = np.zeros((n,nan1, 3),dtype=np.float64)
mdan1    = np.zeros((n,3),dtype=np.float64)
print("Number DCA  = ",nan1)
 
md  = np.zeros((n,3),dtype=np.float64)
j   = np.zeros((n,3),dtype=np.float64)
mdj_cat = np.zeros(n,dtype=np.float64)
mdj_an = np.zeros(n,dtype=np.float64)
jj  = np.zeros(n,dtype=np.float64)

###########################################################################################################################
# Analysis
###########################################################################################################################
ctr=0
start=time.time()
print("")

for ts in u.trajectory[::skip]:
    print("\033[1AFrame %d of %d" % (ts.frame,u.trajectory.numframes), "\tElapsed time: %.2f hours" % ((time.time()-start)/3600))
    uv.trajectory[ts.frame-1]
    
    # efficiently calculate center-of-mass coordinates
    coor_an1  = sel_an1.get_positions()
    coor_cat1 = sel_cat1.get_positions()
    
    com_an1  = sel_an1.centerOfMassByResidue(coor=coor_an1,masses=mass_an1)
    com_cat1 = sel_cat1.centerOfMassByResidue(coor=coor_cat1,masses=mass_cat1)

    mdcat1[ctr] += np.sum(sel_cat1.dipoleMomentByResidue(coor=coor_cat1,charges=charge_cat1,masses=mass_cat1,com=com_cat1),axis=0)
    mdan1[ctr]  += np.sum(sel_an1.dipoleMomentByResidue(coor=coor_an1,charges=charge_an1,masses=mass_an1,com=com_an1),axis=0)
    md[ctr]     += mdcat1[ctr]+mdan1[ctr]

    j[ctr] += np.sum(selv_cat1.velcomByResidue(masses=mass_cat1))
    j[ctr] -= np.sum(selv_an1.velcomByResidue(masses=mass_an1))
    ctr+=1

print ("<MD(0) * J(t)> ...")
crosscorrelXYZ(mdcat1, j, mdj_cat)
crosscorrelXYZ(mdan1, j, mdj_an)

print ("<J(0) * J(t)> ...")
correlXYZ(j, jj)

fjj  = open ('jj.dat','w')
fmdj_cat = open ('mdj_emim.dat','w')
fmdj_an  = open ('mdj_dca.dat','w')
for i in range(ctr):
    fjj.write("%5.5f\t%5.5f\n"   % (i*skip*dt, jj[i]))
    fmdj_cat.write("%5.5f\t%5.5f\n"  % (i*skip*dt, mdj_cat[i]))
    fmdj_an.write("%5.5f\t%5.5f\n"  % (i*skip*dt, mdj_an[i]))
fjj.close()
fmdj_cat.close()
fmdj_an.close()

